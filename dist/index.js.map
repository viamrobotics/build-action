{"mappings":";;;;;;;;;;;;;;;AAKA,MAAM,sCAAgB,0BAAe;;yCAC/B;;wCACA;AAEN,MAAM,kCAAY;IAAC;IAAS;CAAS;AACrC,MAAM,iCAAW;IACb,8FAA8F;IAC9F,OAAO;IACP,SAAS;IACT,QAAQ;AACZ;AACA,MAAM,gCAAU;AAChB,MAAM,mCAAa;IACf,SAAS;QACL,iBAAiB;YAAE,MAAM;QAAU;IACvC;AACJ;AAEA,iDAAiD,GACjD,eAAe,+BAAS,GAAG,EAAE,IAAI,EAAE,OAAO,oBAAa,OAAO;IAC1D,MAAM,SAAS,4BAAqB;IACpC,MAAM,WAAW,MAAM,IAAI,QAAQ,SAAU,OAAO,EAAE,OAAO;QACzD,iBAAU,KAAK,CAAC,WAAa,QAAQ;IACzC;IACA,MAAM,mCAAgB,UAAU;IAChC,IAAI,QAAQ,MACR,oBAAa,MAAM;AAE3B;AAEA,iEAAiE,GACjE,SAAS;IACL,MAAM,WAAW,sBAAe,UAAU;IAC1C,IAAI,gCAAU,OAAO,CAAC,aAAa,IAC/B,MAAM,MAAM,CAAC,iBAAiB,EAAE,SAAS,CAAC;IAE9C,IAAI,8BAAQ,CAAC,QAAQ,IAAI,MACrB,MAAM,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC;IAE5C,OAAO,CAAC,EAAE,SAAS,CAAC,EAAE,8BAAQ,CAAC,QAAQ,CAAC,CAAC;AAC7C;AAEA,eAAe,GACd,CAAA;IACG,MAAM,OAAO,0BAAe;IAC5B,MAAM,OAAO;IACb,QAAQ,GAAG,CAAC,yBAAyB;IACrC,IAAI,CAAC,KAAK,MAAM,CAAC,gBAAgB,EAAE;QAC/B,MAAM,+BAAS,CAAC,+EAA+E,EAAE,KAAK,CAAC,EAAE;QACzG,QAAQ,GAAG,CAAC;IAChB;IACA,QAAQ,GAAG,CAAC,AAAC,CAAA,MAAM,oCAAc,+BAAS;QAAC;KAAU,CAAA,EAAG,MAAM,CAAC,IAAI;IACnE,MAAM,SAAS;QACX,OAAO,mCAAS;QAChB,UAAU,mCAAS;QACnB,SAAS,mCAAS;IACtB;IACA,QAAQ,GAAG,CAAC,mBAAmB;QAC3B,MAAM,CAAC,mBAAmB,EAAE,kCAAQ,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,kCAAQ,IAAI,CAAC,IAAI,CAAC,CAAC;QACrE,KAAK,kCAAQ,GAAG;QAChB,SAAS,OAAO,OAAO;IAC3B;IACA,QAAQ,IAAI,CAAC;IACb,QAAQ,IAAI,CAAC;IACb,QAAQ,IAAI,CAAC;AACjB,CAAA","sources":["src/index.js"],"sourcesContent":["const fs = require('fs');\nconst os = require('os');\nconst https = require('https');\nconst stream = require('node:stream/promises');\nconst util = require('node:util');\nconst execFileAsync = util.promisify(require('node:child_process').execFile);\nconst { getInput } = require('@actions/core');\nconst { context } = require('@actions/github');\n\nconst platforms = ['linux', 'darwin'];\nconst machines = {\n    // todo: why are arm64 and aarch64 both in their docs https://nodejs.org/api/os.html#osmachine\n    arm64: 'arm64',\n    aarch64: 'arm64',\n    x86_64: 'amd64',\n};\nconst cliPath = './viam-cli';\nconst argsConfig = {\n    options: {\n        \"skip-download\": { type: 'boolean' },\n    },\n};\n\n/** download a file and optionally set mode bits */\nasync function download(url, dest, mode = fs.constants.S_IRWXU) {\n    const output = fs.createWriteStream(dest);\n    const incoming = await new Promise(function (resolve, _reject) {\n        https.get(url, (incoming) => resolve(incoming));\n    })\n    await stream.pipeline(incoming, output);\n    if (mode != null) {\n        fs.chmodSync(dest, mode);\n    }\n}\n\n/** infer the architecture portion of the URL from os.* methods. */\nfunction archSlug() {\n    const platform = os.platform(), machine = os.machine();\n    if (platforms.indexOf(platform) == -1) {\n        throw Error(`unknown platform ${platform}`);\n    }\n    if (machines[machine] == null) {\n        throw Error(`unknown machine ${machine}`);\n    }\n    return `${platform}-${machines[machine]}`;\n}\n\n/** async main */\n(async function () {\n    const args = util.parseArgs(argsConfig);\n    const slug = archSlug();\n    console.log('inferred architecture', slug);\n    if (!args.values['skip-download']) {\n        await download(`https://storage.googleapis.com/packages.viam.com/apps/viam-cli/viam-cli-stable-${slug}`, cliPath);\n        console.log('downloaded CLI');\n    }\n    console.log((await execFileAsync(cliPath, ['version'])).stdout.trim());\n    const inputs = {\n        keyId: getInput('key-id'),\n        keyValue: getInput('key-value'),\n        version: getInput('version'),\n    };\n    console.log('I will run with', {\n        repo: `https://github.com/${context.repo.owner}/${context.repo.repo}`,\n        ref: context.ref,\n        version: inputs.version,\n    });\n    console.warn(\"TODO: start build\");\n    console.warn(\"TODO: wait for build\");\n    console.warn(\"TODO: show logs / status\");\n})();\n"],"names":[],"version":3,"file":"index.js.map"}